// Generated by gencpp from file sr_pkg/get_poseRequest.msg
// DO NOT EDIT!


#ifndef SR_PKG_MESSAGE_GET_POSEREQUEST_H
#define SR_PKG_MESSAGE_GET_POSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_pkg
{
template <class ContainerAllocator>
struct get_poseRequest_
{
  typedef get_poseRequest_<ContainerAllocator> Type;

  get_poseRequest_()
    : gobal_pose()  {
      gobal_pose.assign(0.0);
  }
  get_poseRequest_(const ContainerAllocator& _alloc)
    : gobal_pose()  {
  (void)_alloc;
      gobal_pose.assign(0.0);
  }



   typedef boost::array<float, 3>  _gobal_pose_type;
  _gobal_pose_type gobal_pose;





  typedef boost::shared_ptr< ::sr_pkg::get_poseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_pkg::get_poseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct get_poseRequest_

typedef ::sr_pkg::get_poseRequest_<std::allocator<void> > get_poseRequest;

typedef boost::shared_ptr< ::sr_pkg::get_poseRequest > get_poseRequestPtr;
typedef boost::shared_ptr< ::sr_pkg::get_poseRequest const> get_poseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_pkg::get_poseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_pkg::get_poseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sr_pkg::get_poseRequest_<ContainerAllocator1> & lhs, const ::sr_pkg::get_poseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gobal_pose == rhs.gobal_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sr_pkg::get_poseRequest_<ContainerAllocator1> & lhs, const ::sr_pkg::get_poseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sr_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_pkg::get_poseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_pkg::get_poseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_pkg::get_poseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b66cee3a5439006360c9ac9364bbc7cf";
  }

  static const char* value(const ::sr_pkg::get_poseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb66cee3a54390063ULL;
  static const uint64_t static_value2 = 0x60c9ac9364bbc7cfULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_pkg/get_poseRequest";
  }

  static const char* value(const ::sr_pkg::get_poseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] gobal_pose\n"
;
  }

  static const char* value(const ::sr_pkg::get_poseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gobal_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_poseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_pkg::get_poseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_pkg::get_poseRequest_<ContainerAllocator>& v)
  {
    s << indent << "gobal_pose[]" << std::endl;
    for (size_t i = 0; i < v.gobal_pose.size(); ++i)
    {
      s << indent << "  gobal_pose[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gobal_pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_PKG_MESSAGE_GET_POSEREQUEST_H
