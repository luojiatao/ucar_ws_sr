// Generated by gencpp from file darknet_msgs/darknet.msg
// DO NOT EDIT!


#ifndef DARKNET_MSGS_MESSAGE_DARKNET_H
#define DARKNET_MSGS_MESSAGE_DARKNET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_msgs
{
template <class ContainerAllocator>
struct darknet_
{
  typedef darknet_<ContainerAllocator> Type;

  darknet_()
    : E_cuv(0)
    , E_riv(0)
    , E_whv(0)
    , E_cov(0)
    , D_cuv(0)
    , D_riv(0)
    , D_whv(0)
    , D_cov(0)
    , C_cuv(0)
    , C_riv(0)
    , C_whv(0)
    , C_cov(0)
    , B_cuv(0)
    , B_riv(0)
    , B_whv(0)
    , B_cov(0)
    , F_cuf(0)
    , F_cof(0)
    , F_waf(0)  {
    }
  darknet_(const ContainerAllocator& _alloc)
    : E_cuv(0)
    , E_riv(0)
    , E_whv(0)
    , E_cov(0)
    , D_cuv(0)
    , D_riv(0)
    , D_whv(0)
    , D_cov(0)
    , C_cuv(0)
    , C_riv(0)
    , C_whv(0)
    , C_cov(0)
    , B_cuv(0)
    , B_riv(0)
    , B_whv(0)
    , B_cov(0)
    , F_cuf(0)
    , F_cof(0)
    , F_waf(0)  {
  (void)_alloc;
    }



   typedef int8_t _E_cuv_type;
  _E_cuv_type E_cuv;

   typedef int8_t _E_riv_type;
  _E_riv_type E_riv;

   typedef int8_t _E_whv_type;
  _E_whv_type E_whv;

   typedef int8_t _E_cov_type;
  _E_cov_type E_cov;

   typedef int8_t _D_cuv_type;
  _D_cuv_type D_cuv;

   typedef int8_t _D_riv_type;
  _D_riv_type D_riv;

   typedef int8_t _D_whv_type;
  _D_whv_type D_whv;

   typedef int8_t _D_cov_type;
  _D_cov_type D_cov;

   typedef int8_t _C_cuv_type;
  _C_cuv_type C_cuv;

   typedef int8_t _C_riv_type;
  _C_riv_type C_riv;

   typedef int8_t _C_whv_type;
  _C_whv_type C_whv;

   typedef int8_t _C_cov_type;
  _C_cov_type C_cov;

   typedef int8_t _B_cuv_type;
  _B_cuv_type B_cuv;

   typedef int8_t _B_riv_type;
  _B_riv_type B_riv;

   typedef int8_t _B_whv_type;
  _B_whv_type B_whv;

   typedef int8_t _B_cov_type;
  _B_cov_type B_cov;

   typedef int8_t _F_cuf_type;
  _F_cuf_type F_cuf;

   typedef int8_t _F_cof_type;
  _F_cof_type F_cof;

   typedef int8_t _F_waf_type;
  _F_waf_type F_waf;





  typedef boost::shared_ptr< ::darknet_msgs::darknet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_msgs::darknet_<ContainerAllocator> const> ConstPtr;

}; // struct darknet_

typedef ::darknet_msgs::darknet_<std::allocator<void> > darknet;

typedef boost::shared_ptr< ::darknet_msgs::darknet > darknetPtr;
typedef boost::shared_ptr< ::darknet_msgs::darknet const> darknetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_msgs::darknet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_msgs::darknet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_msgs::darknet_<ContainerAllocator1> & lhs, const ::darknet_msgs::darknet_<ContainerAllocator2> & rhs)
{
  return lhs.E_cuv == rhs.E_cuv &&
    lhs.E_riv == rhs.E_riv &&
    lhs.E_whv == rhs.E_whv &&
    lhs.E_cov == rhs.E_cov &&
    lhs.D_cuv == rhs.D_cuv &&
    lhs.D_riv == rhs.D_riv &&
    lhs.D_whv == rhs.D_whv &&
    lhs.D_cov == rhs.D_cov &&
    lhs.C_cuv == rhs.C_cuv &&
    lhs.C_riv == rhs.C_riv &&
    lhs.C_whv == rhs.C_whv &&
    lhs.C_cov == rhs.C_cov &&
    lhs.B_cuv == rhs.B_cuv &&
    lhs.B_riv == rhs.B_riv &&
    lhs.B_whv == rhs.B_whv &&
    lhs.B_cov == rhs.B_cov &&
    lhs.F_cuf == rhs.F_cuf &&
    lhs.F_cof == rhs.F_cof &&
    lhs.F_waf == rhs.F_waf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_msgs::darknet_<ContainerAllocator1> & lhs, const ::darknet_msgs::darknet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_msgs::darknet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_msgs::darknet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_msgs::darknet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_msgs::darknet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_msgs::darknet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_msgs::darknet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_msgs::darknet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96d5d6b2bcac656db2c131f986f9c0bb";
  }

  static const char* value(const ::darknet_msgs::darknet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96d5d6b2bcac656dULL;
  static const uint64_t static_value2 = 0xb2c131f986f9c0bbULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_msgs::darknet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_msgs/darknet";
  }

  static const char* value(const ::darknet_msgs::darknet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_msgs::darknet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 E_cuv\n"
"int8 E_riv\n"
"int8 E_whv\n"
"int8 E_cov\n"
"\n"
"int8 D_cuv\n"
"int8 D_riv\n"
"int8 D_whv\n"
"int8 D_cov\n"
"\n"
"int8 C_cuv\n"
"int8 C_riv\n"
"int8 C_whv\n"
"int8 C_cov\n"
"\n"
"int8 B_cuv\n"
"int8 B_riv\n"
"int8 B_whv\n"
"int8 B_cov\n"
"\n"
"int8 F_cuf\n"
"int8 F_cof\n"
"int8 F_waf\n"
;
  }

  static const char* value(const ::darknet_msgs::darknet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_msgs::darknet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.E_cuv);
      stream.next(m.E_riv);
      stream.next(m.E_whv);
      stream.next(m.E_cov);
      stream.next(m.D_cuv);
      stream.next(m.D_riv);
      stream.next(m.D_whv);
      stream.next(m.D_cov);
      stream.next(m.C_cuv);
      stream.next(m.C_riv);
      stream.next(m.C_whv);
      stream.next(m.C_cov);
      stream.next(m.B_cuv);
      stream.next(m.B_riv);
      stream.next(m.B_whv);
      stream.next(m.B_cov);
      stream.next(m.F_cuf);
      stream.next(m.F_cof);
      stream.next(m.F_waf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct darknet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_msgs::darknet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_msgs::darknet_<ContainerAllocator>& v)
  {
    s << indent << "E_cuv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.E_cuv);
    s << indent << "E_riv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.E_riv);
    s << indent << "E_whv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.E_whv);
    s << indent << "E_cov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.E_cov);
    s << indent << "D_cuv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.D_cuv);
    s << indent << "D_riv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.D_riv);
    s << indent << "D_whv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.D_whv);
    s << indent << "D_cov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.D_cov);
    s << indent << "C_cuv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.C_cuv);
    s << indent << "C_riv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.C_riv);
    s << indent << "C_whv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.C_whv);
    s << indent << "C_cov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.C_cov);
    s << indent << "B_cuv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.B_cuv);
    s << indent << "B_riv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.B_riv);
    s << indent << "B_whv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.B_whv);
    s << indent << "B_cov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.B_cov);
    s << indent << "F_cuf: ";
    Printer<int8_t>::stream(s, indent + "  ", v.F_cuf);
    s << indent << "F_cof: ";
    Printer<int8_t>::stream(s, indent + "  ", v.F_cof);
    s << indent << "F_waf: ";
    Printer<int8_t>::stream(s, indent + "  ", v.F_waf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_MSGS_MESSAGE_DARKNET_H
