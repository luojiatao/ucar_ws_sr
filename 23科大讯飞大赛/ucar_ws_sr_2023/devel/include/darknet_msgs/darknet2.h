// Generated by gencpp from file darknet_msgs/darknet2.msg
// DO NOT EDIT!


#ifndef DARKNET_MSGS_MESSAGE_DARKNET2_H
#define DARKNET_MSGS_MESSAGE_DARKNET2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_msgs
{
template <class ContainerAllocator>
struct darknet2_
{
  typedef darknet2_<ContainerAllocator> Type;

  darknet2_()
    : cuf1(0)
    , cuf2(0)
    , cuf3(0)
    , cof1(0)
    , cof2(0)
    , waf(0)
    , cuv(0)
    , riv(0)
    , whv(0)
    , cov(0)  {
    }
  darknet2_(const ContainerAllocator& _alloc)
    : cuf1(0)
    , cuf2(0)
    , cuf3(0)
    , cof1(0)
    , cof2(0)
    , waf(0)
    , cuv(0)
    , riv(0)
    , whv(0)
    , cov(0)  {
  (void)_alloc;
    }



   typedef int8_t _cuf1_type;
  _cuf1_type cuf1;

   typedef int8_t _cuf2_type;
  _cuf2_type cuf2;

   typedef int8_t _cuf3_type;
  _cuf3_type cuf3;

   typedef int8_t _cof1_type;
  _cof1_type cof1;

   typedef int8_t _cof2_type;
  _cof2_type cof2;

   typedef int8_t _waf_type;
  _waf_type waf;

   typedef int8_t _cuv_type;
  _cuv_type cuv;

   typedef int8_t _riv_type;
  _riv_type riv;

   typedef int8_t _whv_type;
  _whv_type whv;

   typedef int8_t _cov_type;
  _cov_type cov;





  typedef boost::shared_ptr< ::darknet_msgs::darknet2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_msgs::darknet2_<ContainerAllocator> const> ConstPtr;

}; // struct darknet2_

typedef ::darknet_msgs::darknet2_<std::allocator<void> > darknet2;

typedef boost::shared_ptr< ::darknet_msgs::darknet2 > darknet2Ptr;
typedef boost::shared_ptr< ::darknet_msgs::darknet2 const> darknet2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_msgs::darknet2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_msgs::darknet2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_msgs::darknet2_<ContainerAllocator1> & lhs, const ::darknet_msgs::darknet2_<ContainerAllocator2> & rhs)
{
  return lhs.cuf1 == rhs.cuf1 &&
    lhs.cuf2 == rhs.cuf2 &&
    lhs.cuf3 == rhs.cuf3 &&
    lhs.cof1 == rhs.cof1 &&
    lhs.cof2 == rhs.cof2 &&
    lhs.waf == rhs.waf &&
    lhs.cuv == rhs.cuv &&
    lhs.riv == rhs.riv &&
    lhs.whv == rhs.whv &&
    lhs.cov == rhs.cov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_msgs::darknet2_<ContainerAllocator1> & lhs, const ::darknet_msgs::darknet2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_msgs::darknet2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_msgs::darknet2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_msgs::darknet2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_msgs::darknet2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_msgs::darknet2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_msgs::darknet2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_msgs::darknet2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "926901501b0964cda8759316557a1042";
  }

  static const char* value(const ::darknet_msgs::darknet2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x926901501b0964cdULL;
  static const uint64_t static_value2 = 0xa8759316557a1042ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_msgs::darknet2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_msgs/darknet2";
  }

  static const char* value(const ::darknet_msgs::darknet2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_msgs::darknet2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cuf1\n"
"int8 cuf2\n"
"int8 cuf3\n"
"int8 cof1\n"
"int8 cof2\n"
"int8 waf\n"
"int8 cuv\n"
"int8 riv\n"
"int8 whv\n"
"int8 cov\n"
"\n"
;
  }

  static const char* value(const ::darknet_msgs::darknet2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_msgs::darknet2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cuf1);
      stream.next(m.cuf2);
      stream.next(m.cuf3);
      stream.next(m.cof1);
      stream.next(m.cof2);
      stream.next(m.waf);
      stream.next(m.cuv);
      stream.next(m.riv);
      stream.next(m.whv);
      stream.next(m.cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct darknet2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_msgs::darknet2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_msgs::darknet2_<ContainerAllocator>& v)
  {
    s << indent << "cuf1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cuf1);
    s << indent << "cuf2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cuf2);
    s << indent << "cuf3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cuf3);
    s << indent << "cof1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cof1);
    s << indent << "cof2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cof2);
    s << indent << "waf: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waf);
    s << indent << "cuv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cuv);
    s << indent << "riv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.riv);
    s << indent << "whv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.whv);
    s << indent << "cov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_MSGS_MESSAGE_DARKNET2_H
